# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI

on:
  pull_request:
  push:
    branches:
      - 'main'

jobs:
  zanshincli_jobs:
    strategy:
      matrix:
        # Run in all these versions of Python
        python-version: [ 3.8, 3.9, "3.10" ]
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    name: Test and Coverage
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python setup.py install

      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Create fake tenchi config on Linux and Mac
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          mkdir -p $HOME/.tenchi
          touch $HOME/.tenchi/config
          echo $'[default]\napi_key = apikey\n' > $HOME/.tenchi/config

      - name: Create fake tenchi config on Windows
        if: matrix.os == 'windows-latest'
        run: |
          md $HOME\\.tenchi
          echo $'[default]\napi_key = apikey\n' > $HOME\\.tenchi\\config

      - name: Unit tests
        run: |
          pip install -r requirements.txt
          make test

      - name: Generate updated documentation
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y pandoc
          rm README.md CLI.md README.rst
          make README.rst

      - name: Test coverage
        if: matrix.os == 'ubuntu-latest'
        run: |
          pip install coverage
          make coverage

      - name: Coverage comment
        id: coverage_comment
        uses: ewjoachim/python-coverage-comment-action@v2
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true' && matrix.os == 'ubuntu-latest'
        with:
          GITHUB_TOKEN: ${{ github.token }}
          VERBOSE: true
          MINIMUM_GREEN: 90
          MINIMUM_ORANGE: 60

      - name: Store Pull Request comment to be posted
        uses: actions/upload-artifact@v2
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true' && matrix.os == 'ubuntu-latest'
        with:
          # If you use a different name, update COMMENT_ARTIFACT_NAME accordingly
          name: python-coverage-comment-action
          # If you use a different name, update COMMENT_FILENAME accordingly
          path: python-coverage-comment-action.txt
